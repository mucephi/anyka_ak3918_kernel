/**
 * @file camera_nt99141.h
 * @brief camera driver file
 * Copyright (C) 2010 Anyka (Guangzhou) Microelectronics Technology Co., Ltd
 * @author xia_wenting 
 * @date 2011-05-06
 * @version 1.0
 * @ref
 */
#ifndef __CAMERA_NT9914100_H__
#define __CAMERA_NT9914100_H__
#if defined (USE_CAMERA_NT9914100) || defined (CONFIG_SENSOR_NT99141)

#define nt99141_00      1    //  1 :正180  0: 反180  


#define DELAY_FLAG        0xfb   // first parameter is 0xfb, then 2nd parameter is delay time count

#ifndef END_FLAG
#define END_FLAG          0xfc   // first parameter is 0xfc, then parameter table is over 
#endif

#define NT99141_HD_30_FPS	     //PCLK_74M
//#define NT99141_HD_15-30_FPS	 //
#define NT99141_HD_6_66_30_FPS


static const T_U8 INIT_TAB[] = 
{  
//初始化
//[Init]   2013-09-16   //Modify 2014-01-20
//0x30, 0x69, 0x01,   //Data
//0x30, 0x6A, 0x03,   //PCLK
0x30, 0x69, 0x03,   //Data
0x30, 0x6A, 0x03,   //PCLK

0x30, 0x24, 0x02,
0x31, 0x09, 0x04,
0x30, 0x40, 0x04,
0x30, 0x41, 0x02,
0x30, 0x42, 0xFF,
0x30, 0x43, 0x08,
0x30, 0x52, 0xE0,
0x30, 0x5F, 0x33,
0x31, 0x00, 0x07,
0x31, 0x06, 0x03,
0x31, 0x05, 0x01,
0x31, 0x08, 0x05,
0x31, 0x10, 0x22,
0x31, 0x11, 0x57,
0x31, 0x12, 0x22,
0x31, 0x13, 0x55,
0x31, 0x14, 0x05,
0x31, 0x35, 0x00,
0x32, 0xF0, 0x00,  //0x01
0x32, 0x90, 0x01,
0x32, 0x91, 0x80,
0x32, 0x96, 0x01,
0x32, 0x97, 0x73,
0x32, 0x50, 0x80,
0x32, 0x51, 0x03,
0x32, 0x52, 0xFF,
0x32, 0x53, 0x00,
0x32, 0x54, 0x03,
0x32, 0x55, 0xFF,
0x32, 0x56, 0x00,
0x32, 0x57, 0x50,
0x32, 0x70, 0x00,
0x32, 0x71, 0x0C,
0x32, 0x72, 0x18,
0x32, 0x73, 0x2D,
0x32, 0x74, 0x41,
0x32, 0x75, 0x52,
0x32, 0x76, 0x6D,
0x32, 0x77, 0x82,
0x32, 0x78, 0x93,
0x32, 0x79, 0xa3,
0x32, 0x7A, 0xBC,
0x32, 0x7B, 0xd3,
0x32, 0x7C, 0xE6,
0x32, 0x7D, 0xF6,
0x32, 0x7E, 0xFF,                
0x33, 0x02, 0x00,
0x33, 0x03, 0x5C,
0x33, 0x04, 0x00,
0x33, 0x05, 0x6C,
0x33, 0x06, 0x00,
0x33, 0x07, 0x39,
0x33, 0x08, 0x07,
0x33, 0x09, 0xBE,
0x33, 0x0A, 0x06,
0x33, 0x0B, 0xF9,
0x33, 0x0C, 0x01,
0x33, 0x0D, 0x46,
0x33, 0x0E, 0x01,
0x33, 0x0F, 0x0D,
0x33, 0x10, 0x06,
0x33, 0x11, 0xFD,
0x33, 0x12, 0x07,
0x33, 0x13, 0xFC,                
0x33, 0x26, 0x03,//0x02
0x32, 0xF6, 0x0F,
0x32, 0xF9, 0x42,
0x32, 0xFA, 0x24,
0x33, 0x25, 0x4A,
0x33, 0x30, 0x00,
0x33, 0x31, 0x06,
0x33, 0x32, 0x70,
0x33, 0x38, 0x30,
0x33, 0x39, 0xA5,
0x33, 0x3A, 0x5A,
0x33, 0x3F, 0x07,         
0x33, 0x60, 0x0C,
0x33, 0x61, 0x14,
0x33, 0x62, 0x1f,
0x33, 0x63, 0x37,
0x33, 0x64, 0x90,
0x33, 0x65, 0x80,
0x33, 0x66, 0x70,
0x33, 0x67, 0x58,

0x33, 0x68, 0xA0,
0x33, 0x69, 0x80,
0x33, 0x6A, 0x80,	
0x33, 0x6B, 0x40,
0x33, 0x6C, 0x00,
0x33, 0x6D, 0x20,
0x33, 0x6E, 0x1C,
0x33, 0x6F, 0x18,
0x33, 0x70, 0x10,
0x33, 0x71, 0x30,	//0x38
0x33, 0x72, 0x38,	//0x3C
0x33, 0x73, 0x3F,
0x33, 0x74, 0x3F,
0x33, 0x8A, 0x34,
0x33, 0x8B, 0x7F,
0x33, 0x8C, 0x10,
0x33, 0x8D, 0x23,
0x33, 0x8E, 0x7F,
0x33, 0x8F, 0x14,
0x33, 0x75, 0x0A, 
0x33, 0x76, 0x0C, 
0x33, 0x77, 0x10, 
0x33, 0x78, 0x14,             
0x30, 0x12, 0x02,
0x30, 0x13, 0xD0,

//MCK     :  24MHz
#if 0
//PCLK    :  48MHz
//[YUYV_1280x720_8.33_19.00_Fps]
0x32, 0xBF, 0x60, 
0x32, 0xC0, 0x78, 
0x32, 0xC1, 0x78, 
0x32, 0xC2, 0x78, 
0x32, 0xC3, 0x00, 
0x32, 0xC4, 0x27, 
0x32, 0xC5, 0x28, 
0x32, 0xC6, 0x28, 
0x32, 0xC7, 0x00, 
0x32, 0xC8, 0x8C, 
0x32, 0xC9, 0x78, 
0x32, 0xCA, 0xA0, 
0x32, 0xCB, 0xA0, 
0x32, 0xCC, 0xA0, 
0x32, 0xCD, 0xA0, 
0x32, 0xDB, 0x71, 
0x32, 0x00, 0x3E, 
0x32, 0x01, 0x0F, 
0x30, 0x28, 0x07, 
0x30, 0x29, 0x00, 
0x30, 0x2A, 0x04, 

#if nt99141_00
0x30, 0x22, 0x24,   //正180
#else
0x30, 0x22, 0x27,  //反  180
#endif

0x30, 0x23, 0x24, 
0x30, 0x02, 0x00, 
0x30, 0x03, 0x04, 
0x30, 0x04, 0x00, 
0x30, 0x05, 0x04, 
0x30, 0x06, 0x05, 
0x30, 0x07, 0x03, 
0x30, 0x08, 0x02, 
0x30, 0x09, 0xD3, 
0x30, 0x0A, 0x06, 
0x30, 0x0B, 0xB4, 
0x30, 0x0C, 0x02, 
0x30, 0x0D, 0xE0, 
0x30, 0x0E, 0x05, 
0x30, 0x0F, 0x00, 
0x30, 0x10, 0x02, 
0x30, 0x11, 0xD0, 
0x32, 0xB8, 0x3F, 
0x32, 0xB9, 0x31, 
0x32, 0xBB, 0x87, 
0x32, 0xBC, 0x38, 
0x32, 0xBD, 0x3C, 
0x32, 0xBE, 0x34, 
0x32, 0x01, 0x3F, 
0x30, 0x21, 0x06, 
0x30, 0x60, 0x01,  
#else
#ifdef NT99141_HD_6_66_30_FPS
//PCLK :  74MHz
//[YUYV_1280x720_6.66_30.03_Fps]
0x32,0xBF, 0x60, 
0x32,0xC0, 0x7e, 
0x32,0xC1, 0x7e, 
0x32,0xC2, 0x7e, 
0x32,0xC3, 0x00, 
0x32,0xC4, 0x20, 
//0x32,0xC4, 0x34, 	//2014-01-20
//0x32,0xC4, 0x2F, 	//2014-01-20
0x32,0xC5, 0x20, 
0x32,0xC6, 0x20, 
0x32,0xC7, 0x00, 
0x32,0xC8, 0xDE, 
0x32,0xC9, 0x7e, 
0x32,0xCA, 0x9E, 
0x32,0xCB, 0x9E, 
0x32,0xCC, 0x9E, 
0x32,0xCD, 0x9E, 
0x32,0xDB, 0x7B, 
0x32,0x00, 0x3E, 
0x32,0x01, 0x0F, 
0x30,0x28, 0x24, 
0x30,0x29, 0x20, 
0x30,0x2A, 0x04, 

#if nt99141_00
0x30, 0x22, 0x24,   //正180
#else
0x30, 0x22, 0x27,  //反  180
#endif

0x30,0x23, 0x24, 
0x30,0x02, 0x00, 
0x30,0x03, 0x04, 
0x30,0x04, 0x00, 
0x30,0x05, 0x04, 
0x30,0x06, 0x05, 
0x30,0x07, 0x03, 
0x30,0x08, 0x02, 
0x30,0x09, 0xD3, 
0x30,0x0A, 0x06, 
0x30,0x0B, 0x83, 
0x30,0x0C, 0x02, 
0x30,0x0D, 0xE3, 
0x30,0x0E, 0x05, 
0x30,0x0F, 0x00, 
0x30,0x10, 0x02, 
0x30,0x11, 0xD0, 
0x32,0xB8, 0x3F, 
0x32,0xB9, 0x31, 
0x32,0xBB, 0x87, 
0x32,0xBC, 0x38, 
0x32,0xBD, 0x3C, 
0x32,0xBE, 0x34, 
0x32,0x01, 0x3F, 
0x30,0x21, 0x06, 
0x30,0x60, 0x01, 
/*
//[Anti-Flicker：50Hz]
0x32,0xBF, 0x60, 
0x32,0xC0, 0x7e, 
0x32,0xC1, 0x7e, 
0x32,0xC2, 0x7e, 
0x32,0xC3, 0x00, 
//0x32,0xC4, 0x20, 
0x32,0xC5, 0x20, 
0x32,0xC6, 0x20, 
0x32,0xC7, 0x00, 
0x32,0xC8, 0xDE, 
0x32,0xC9, 0x7e, 
0x32,0xCA, 0x9e, 
0x32,0xCB, 0x9e, 
0x32,0xCC, 0x9e, 
0x32,0xCD, 0x9e, 
0x32,0xDB, 0x7B, 

//[Anti-Flicker：60Hz]
0x32,0xBF, 0x60, 
0x32,0xC0, 0x82, 
0x32,0xC1, 0x82, 
0x32,0xC2, 0x82, 
0x32,0xC3, 0x00, 
//0x32,0xC4, 0x20, 
0x32,0xC5, 0x20, 
0x32,0xC6, 0x20, 
0x32,0xC7, 0x00, 
0x32,0xC8, 0xB9, 
0x32,0xC9, 0x82, 
0x32,0xCA, 0xa2, 
0x32,0xCB, 0xa2, 
0x32,0xCC, 0xa2, 
0x32,0xCD, 0xa2, 
0x32,0xDB, 0x77, 
*/
#ifdef NT99141_HD_30_FPS
//PCLK :  74MHz
//[YUYV_1280x720_30.00_30.03_Fps]
0x32,0xBF, 0x40, 
0x32,0xC0, 0x5A, 
0x32,0xC1, 0x5A, 
0x32,0xC2, 0x5A, 
0x32,0xC3, 0x00, 
//0x32,0xC4, 0x20, 
0x32,0xC4, 0x34, 	//2014-01-20
//0x32,0xC4, 0x2F, 	//2014-01-20
0x32,0xC5, 0x20, 
0x32,0xC6, 0x20, 
0x32,0xC7, 0x00, 
0x32,0xC8, 0xDE, 
0x32,0xC9, 0x5A, 
0x32,0xCA, 0x7A, 
0x32,0xCB, 0x7A, 
0x32,0xCC, 0x7A, 
0x32,0xCD, 0x7A, 
0x32,0xDB, 0x7B, 
0x32,0x00, 0x3E, 
0x32,0x01, 0x0F, 
0x30,0x28, 0x24, 
0x30,0x29, 0x20, 
0x30,0x2A, 0x04, 

#if nt99141_00
0x30, 0x22, 0x24,   //正180
#else
0x30, 0x22, 0x27,  //反  180
#endif

0x30,0x23, 0x24, 
0x30,0x02, 0x00, 
0x30,0x03, 0x04, 
0x30,0x04, 0x00, 
0x30,0x05, 0x04, 
0x30,0x06, 0x05, 
0x30,0x07, 0x03, 
0x30,0x08, 0x02, 
0x30,0x09, 0xD3, 
0x30,0x0A, 0x06, 
0x30,0x0B, 0x83, 
0x30,0x0C, 0x02, 
0x30,0x0D, 0xE3, 
0x30,0x0E, 0x05, 
0x30,0x0F, 0x00, 
0x30,0x10, 0x02, 
0x30,0x11, 0xD0, 
0x32,0xB8, 0x3F, 
0x32,0xB9, 0x31, 
0x32,0xBB, 0x87, 
0x32,0xBC, 0x38, 
0x32,0xBD, 0x3C, 
0x32,0xBE, 0x34, 
0x32,0x01, 0x3F, 
0x30,0x21, 0x06, 
0x30,0x60, 0x01, 
/*
//[Anti-Flicker：50Hz]
0x32,0xBF, 0x40, 
0x32,0xC0, 0x5A, 
0x32,0xC1, 0x5A, 
0x32,0xC2, 0x5A, 
0x32,0xC3, 0x00, 
0x32,0xC4, 0x20, 
0x32,0xC5, 0x20, 
0x32,0xC6, 0x20, 
0x32,0xC7, 0x00, 
0x32,0xC8, 0xDE, 
0x32,0xC9, 0x5A, 
0x32,0xCA, 0x7A, 
0x32,0xCB, 0x7A, 
0x32,0xCC, 0x7A, 
0x32,0xCD, 0x7A, 
0x32,0xDB, 0x7B, 

//[Anti-Flicker：60Hz]
0x32,0xBF, 0x40, 
0x32,0xC0, 0x60, 
0x32,0xC1, 0x5F, 
0x32,0xC2, 0x5F, 
0x32,0xC3, 0x00, 
0x32,0xC4, 0x20, 
0x32,0xC5, 0x20, 
0x32,0xC6, 0x20, 
0x32,0xC7, 0x00, 
0x32,0xC8, 0xB9, 
0x32,0xC9, 0x5F, 
0x32,0xCA, 0x7F, 
0x32,0xCB, 0x7F, 
0x32,0xCC, 0x7F, 
0x32,0xCD, 0x80, 
0x32,0xDB, 0x77, 
*/
#endif  //cut for hd 30fps  
#else
//PCLK    :  68MHz
//[YUYV_1280x720_12.50_20.00_Fps]
0x32, 0xBF, 0x60, 
0x32, 0xC0, 0x70, 
0x32, 0xC1, 0x70, 
0x32, 0xC2, 0x70, 
0x32, 0xC3, 0x00, 
0x32, 0xC4, 0x27, 
0x32, 0xC5, 0x28, 
0x32, 0xC6, 0x28, 
0x32, 0xC7, 0x00, 
0x32, 0xC8, 0xA0, 
0x32, 0xC9, 0x70, 
0x32, 0xCA, 0x98, 
0x32, 0xCB, 0x98, 
0x32, 0xCC, 0x98, 
0x32, 0xCD, 0x98, 
0x32, 0xDB, 0x74, 
0x32, 0x00, 0x3E, 
0x32, 0x01, 0x0F, 
0x30, 0x28, 0x1F, 
0x30, 0x29, 0x20, 
0x30, 0x2A, 0x04, 

#if nt99141_00
0x30, 0x22, 0x24,   //正180
#else
0x30, 0x22, 0x27,  //反  180
#endif
0x30, 0x23, 0x24, 
0x30, 0x02, 0x00, 
0x30, 0x03, 0x04, 
0x30, 0x04, 0x00, 
0x30, 0x05, 0x04, 
0x30, 0x06, 0x05, 
0x30, 0x07, 0x03, 
0x30, 0x08, 0x02, 
0x30, 0x09, 0xD3, 
0x30, 0x0A, 0x07, 
0x30, 0x0B, 0xD0, 
0x30, 0x0C, 0x03, 
0x30, 0x0D, 0x20, 
0x30, 0x0E, 0x05, 
0x30, 0x0F, 0x00, 
0x30, 0x10, 0x02, 
0x30, 0x11, 0xD0, 
0x32, 0xB8, 0x3F, 
0x32, 0xB9, 0x31, 
0x32, 0xBB, 0x87, 
0x32, 0xBC, 0x38, 
0x32, 0xBD, 0x3C, 
0x32, 0xBE, 0x34, 
0x32, 0x01, 0x3F, 
0x30, 0x21, 0x06, 
0x30, 0x60, 0x01, 
#endif
#endif
 
END_FLAG, END_FLAG, END_FLAG
};
static const T_U8 UXGA_MODE_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};
static const T_U8 SXGA_MODE_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};
static const T_U8 VGA_MODE_TAB[] = 
{
0x33, 0x75, 0x0A, 
0x33, 0x76, 0x0C, 
0x33, 0x77, 0x10, 
0x33, 0x78, 0x14,  
0x33, 0x31, 0x0E,

//MCK     :  24MHz
//PCLK    :  48MHz
//[YUYV_640x480_8.33_19.00_Fps] 
0x32, 0xBF, 0x60, 
0x32, 0xC0, 0x78, 
0x32, 0xC1, 0x78, 
0x32, 0xC2, 0x78, 
0x32, 0xC3, 0x00, 
0x32, 0xC4, 0x27, 
0x32, 0xC5, 0x28, 
0x32, 0xC6, 0x28, 
0x32, 0xC7, 0x00, 
0x32, 0xC8, 0x8C, 
0x32, 0xC9, 0x78, 
0x32, 0xCA, 0xA0, 
0x32, 0xCB, 0xA0, 
0x32, 0xCC, 0xA0, 
0x32, 0xCD, 0xA0, 
0x32, 0xDB, 0x71, 
0x32, 0xE0, 0x02, 
0x32, 0xE1, 0x80, 
0x32, 0xE2, 0x01, 
0x32, 0xE3, 0xE0, 
0x32, 0xE4, 0x00, 
0x32, 0xE5, 0x80, 
0x32, 0xE6, 0x00, 
0x32, 0xE7, 0x80, 
0x32, 0x00, 0x3E, 
0x32, 0x01, 0x0F, 
0x30, 0x28, 0x07, 
0x30, 0x29, 0x00, 
0x30, 0x2A, 0x04, 
#if nt99141_00
0x30, 0x22, 0x24,   //正180
#else
0x30, 0x22, 0x27,  //反  180
#endif
0x30, 0x23, 0x24, 
0x30, 0x02, 0x00, 
0x30, 0x03, 0xA4, 
0x30, 0x04, 0x00, 
0x30, 0x05, 0x04, 
0x30, 0x06, 0x04, 
0x30, 0x07, 0x63, 
0x30, 0x08, 0x02, 
0x30, 0x09, 0xD3, 
0x30, 0x0A, 0x06, 
0x30, 0x0B, 0xB4, 
0x30, 0x0C, 0x02, 
0x30, 0x0D, 0xE0, 
0x30, 0x0E, 0x03, 
0x30, 0x0F, 0xC0, 
0x30, 0x10, 0x02, 
0x30, 0x11, 0xD0, 
0x32, 0xB8, 0x3F, 
0x32, 0xB9, 0x31, 
0x32, 0xBB, 0x87, 
0x32, 0xBC, 0x38, 
0x32, 0xBD, 0x3C, 
0x32, 0xBE, 0x34, 
0x32, 0x01, 0x7F, 
0x30, 0x21, 0x06, 
0x30, 0x60, 0x01, 
            
END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 CIF_MODE_TAB[] = 
{

    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 QVGA_MODE_TAB[] = 
{
//[YUYV_320x240_24.00_30.00_Fps]
            

    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 QCIF_MODE_TAB[] = 
{

    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 QQVGA_MODE_TAB[] = 
{

    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 PREV_MODE_TAB[] = 
{


END_FLAG, END_FLAG, END_FLAG
};
static const T_U8 CAP_VGA_MODE_TAB[] = 
{ 
END_FLAG, END_FLAG, END_FLAG
};
static const T_U8 CAP_720P_MODE_TAB[] = 
{ 
0x33, 0x75, 0x0A, 
0x33, 0x76, 0x0C, 
0x33, 0x77, 0x10, 
0x33, 0x78, 0x16,  

0x30,0x25,0x00,
0x30,0x53,0x50,
0x30,0x54,0x0c,
0x31,0x09,0x04,

#ifdef NT99141_HD_6_66_30_FPS
//PCLK :  74MHz
//[YUYV_1280x720_6.66_30.03_Fps]

0x32,0xbf,0x60,
0x32,0xc0,0x64,
0x32,0xc1,0x64,
0x32,0xc2,0x64,
0x32,0xc5,0x28,
0x32,0xc6,0x28,
0x32,0xc7,0x00,
0x32,0xc8,0x93,
0x32,0xc9,0x64,
0x32,0xca,0x84,
0x32,0xcb,0x84,
0x32,0xcc,0x84,
0x32,0xcd,0x84,
0x32,0xdb,0x72,
 
0x32,0x00, 0x3E, 
0x32,0x01, 0x0F, 

0x30,0x28,0x0a,
0x30,0x29,0x00,
0x30,0x2a,0x04,
 

#if nt99141_00
0x30, 0x22, 0x24,   //正180
#else
0x30, 0x22, 0x27,  //反  180
#endif

0x30,0x23, 0x24, 
0x30,0x02, 0x00, 
0x30,0x03, 0x04, 
0x30,0x04, 0x00, 
0x30,0x05, 0x04, 
0x30,0x06, 0x05, 
0x30,0x07, 0x03, 
0x30,0x08, 0x02, 
0x30,0x09, 0xD3, 
0x30,0x0a,0x08,
0x30,0x0b,0xc1,
0x30,0x0c,0x02,
0x30,0x0d,0xe0,
0x30,0x0E, 0x05, 
0x30,0x0F, 0x00, 
0x30,0x10, 0x02, 
0x30,0x11, 0xD0, 
0x32,0xB8, 0x3F, 
0x32,0xB9, 0x31, 
0x32,0xBB, 0x87, 
0x32,0xBC, 0x38, 
0x32,0xBD, 0x3C, 
0x32,0xBE, 0x34, 
0x32,0x01, 0x3F, 
0x30,0x21,0x06,
0x30,0x60,0x01,




#ifdef NT99141_HD_30_FPS
//PCLK :  74MHz
//[YUYV_1280x720_30.00_30.03_Fps]
0x32,0xbf,0x60,
0x32,0xc0,0x64,
0x32,0xc1,0x64,
0x32,0xc2,0x64,
0x32,0xc5,0x28,
0x32,0xc6,0x28,
0x32,0xc7,0x00,
0x32,0xc8,0x93,
0x32,0xc9,0x64,
0x32,0xca,0x84,
0x32,0xcb,0x84,
0x32,0xcc,0x84,
0x32,0xcd,0x84,
0x32,0xdb,0x72,

0x32,0x00, 0x3E, 
0x32,0x01, 0x0F, 

0x30,0x28,0x0a,
0x30,0x29,0x00,
0x30,0x2a,0x04,
#if nt99141_00
0x30, 0x22, 0x24,   //正180
#else
0x30, 0x22, 0x27,  //反  180
#endif
0x30,0x23, 0x24, 
0x30,0x02, 0x00, 
0x30,0x03, 0x04, 
0x30,0x04, 0x00, 
0x30,0x05, 0x04, 
0x30,0x06, 0x05, 
0x30,0x07, 0x03, 
0x30,0x08, 0x02, 
0x30,0x09, 0xD3, 
0x30,0x0a,0x08,
0x30,0x0b,0xc1,
0x30,0x0c,0x02,
0x30,0x0d,0xe0, 
0x30,0x0E, 0x05, 
0x30,0x0F, 0x00, 
0x30,0x10, 0x02, 
0x30,0x11, 0xD0, 
0x32,0xB8, 0x3F, 
0x32,0xB9, 0x31, 
0x32,0xBB, 0x87, 
0x32,0xBC, 0x38, 
0x32,0xBD, 0x3C, 
0x32,0xBE, 0x34, 
0x32,0x01, 0x3F, 
0x30,0x21,0x06,
0x30,0x60,0x01, 
#endif  //cut for hd 30fps 

#endif

0x30,0x25,0x00,
0x30,0x53,0x50,
0x30,0x54,0x0c,
0x31,0x09,0x04,
0x32,0xbf,0x60,
0x32,0xc0,0x64,
0x32,0xc1,0x64,
0x32,0xc2,0x64,
0x32,0xc5,0x28,
0x32,0xc6,0x28,
0x32,0xc7,0x00,
0x32,0xc8,0x93,
0x32,0xc9,0x64,
0x32,0xca,0x84,
0x32,0xcb,0x84,
0x32,0xcc,0x84,
0x32,0xcd,0x84,
0x32,0xdb,0x72,
0x30,0x28,0x0a,
0x30,0x29,0x00,
0x30,0x2a,0x04,
0x30,0x0a,0x08,
0x30,0x0b,0xc1,
0x30,0x0c,0x02,
0x30,0x0d,0xe0,
0x30,0x21,0x06,
0x30,0x60,0x01,
	0x30,0x25,0x00,
	0x30,0x53,0x50,
	0x30,0x54,0x0c,
	0x31,0x09,0x04,
	0x32,0xbf,0x60,
	0x32,0xc0,0x64,
	0x32,0xc1,0x64,
	0x32,0xc2,0x64,
	0x32,0xc5,0x28,
	0x32,0xc6,0x28,
	0x32,0xc7,0x00,
	0x32,0xc8,0x93,
	0x32,0xc9,0x64,
	0x32,0xca,0x84,
	0x32,0xcb,0x84,
	0x32,0xcc,0x84,
	0x32,0xcd,0x84,
	0x32,0xdb,0x72,
	0x30,0x28,0x0a,
	0x30,0x29,0x00,
	0x30,0x2a,0x04,
	0x30,0x0a,0x08,
	0x30,0x0b,0xc1,
	0x30,0x0c,0x02,
	0x30,0x0d,0xe0,
	0x30,0x21,0x06,
	0x30,0x60,0x01,


END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 RECORD_MODE_TAB[] = 
{
0x33, 0x75, 0x0A, 
0x33, 0x76, 0x0C, 
0x33, 0x77, 0x10, 
0x33, 0x78, 0x14, 
0x33, 0x31, 0x0E, 

//MCK     :  24MHz
//PCLK    :  48MHz
//[YUYV_640x480_8.33_19.00_Fps] 
0x32, 0xBF, 0x60, 
0x32, 0xC0, 0x78, 
0x32, 0xC1, 0x78, 
0x32, 0xC2, 0x78, 
0x32, 0xC3, 0x00, 
0x32, 0xC4, 0x27, 
0x32, 0xC5, 0x28, 
0x32, 0xC6, 0x28, 
0x32, 0xC7, 0x00, 
0x32, 0xC8, 0x8C, 
0x32, 0xC9, 0x78, 
0x32, 0xCA, 0xA0, 
0x32, 0xCB, 0xA0, 
0x32, 0xCC, 0xA0, 
0x32, 0xCD, 0xA0, 
0x32, 0xDB, 0x71, 
0x32, 0xE0, 0x02, 
0x32, 0xE1, 0x80, 
0x32, 0xE2, 0x01, 
0x32, 0xE3, 0xE0, 
0x32, 0xE4, 0x00, 
0x32, 0xE5, 0x80, 
0x32, 0xE6, 0x00, 
0x32, 0xE7, 0x80, 
0x32, 0x00, 0x3E, 
0x32, 0x01, 0x0F, 
0x30, 0x28, 0x07, 
0x30, 0x29, 0x00, 
0x30, 0x2A, 0x04, 

#if nt99141_00
0x30, 0x22, 0x24,   //正180
#else
0x30, 0x22, 0x27,  //反  180
#endif
0x30, 0x23, 0x24, 
0x30, 0x02, 0x00, 
0x30, 0x03, 0xA4, 
0x30, 0x04, 0x00, 
0x30, 0x05, 0x04, 
0x30, 0x06, 0x04, 
0x30, 0x07, 0x63, 
0x30, 0x08, 0x02, 
0x30, 0x09, 0xD3, 
0x30, 0x0A, 0x06, 
0x30, 0x0B, 0xB4, 
0x30, 0x0C, 0x02, 
0x30, 0x0D, 0xE0, 
0x30, 0x0E, 0x03, 
0x30, 0x0F, 0xC0, 
0x30, 0x10, 0x02, 
0x30, 0x11, 0xD0, 
0x32, 0xB8, 0x3F, 
0x32, 0xB9, 0x31, 
0x32, 0xBB, 0x87, 
0x32, 0xBC, 0x38, 
0x32, 0xBD, 0x3C, 
0x32, 0xBE, 0x34, 
0x32, 0x01, 0x7F, 
0x30, 0x21, 0x06, 
0x30, 0x60, 0x01, 

END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 RECORD_720P_TAB[] = 
{
0x33, 0x75, 0x0A, 
0x33, 0x76, 0x0C, 
0x33, 0x77, 0x10, 
0x33, 0x78, 0x16,  
//0x33, 0x31, 0x10,

//MCK     :  24MHz
#if 0
//PCLK    :  48MHz
//[YUYV_1280x720_8.33_19.00_Fps]
0x32, 0xBF, 0x60, 
0x32, 0xC0, 0x78, 
0x32, 0xC1, 0x78, 
0x32, 0xC2, 0x78, 
0x32, 0xC3, 0x00, 
0x32, 0xC4, 0x27, 
0x32, 0xC5, 0x28, 
0x32, 0xC6, 0x28, 
0x32, 0xC7, 0x00, 
0x32, 0xC8, 0x8C, 
0x32, 0xC9, 0x78, 
0x32, 0xCA, 0xA0, 
0x32, 0xCB, 0xA0, 
0x32, 0xCC, 0xA0, 
0x32, 0xCD, 0xA0, 
0x32, 0xDB, 0x71, 
0x32, 0x00, 0x3E, 
0x32, 0x01, 0x0F, 
0x30, 0x28, 0x07, 
0x30, 0x29, 0x00, 
0x30, 0x2A, 0x04, 

#if nt99141_00
0x30, 0x22, 0x24,   //正180
#else
0x30, 0x22, 0x27,  //反  180
#endif

0x30, 0x23, 0x24, 
0x30, 0x02, 0x00, 
0x30, 0x03, 0x04, 
0x30, 0x04, 0x00, 
0x30, 0x05, 0x04, 
0x30, 0x06, 0x05, 
0x30, 0x07, 0x03, 
0x30, 0x08, 0x02, 
0x30, 0x09, 0xD3, 
0x30, 0x0A, 0x06, 
0x30, 0x0B, 0xB4, 
0x30, 0x0C, 0x02, 
0x30, 0x0D, 0xE0, 
0x30, 0x0E, 0x05, 
0x30, 0x0F, 0x00, 
0x30, 0x10, 0x02, 
0x30, 0x11, 0xD0, 
0x32, 0xB8, 0x3F, 
0x32, 0xB9, 0x31, 
0x32, 0xBB, 0x87, 
0x32, 0xBC, 0x38, 
0x32, 0xBD, 0x3C, 
0x32, 0xBE, 0x34, 
0x32, 0x01, 0x3F, 
0x30, 0x21, 0x06, 
0x30, 0x60, 0x01, 
#else
#ifdef NT99141_HD_6_66_30_FPS
//PCLK :  74MHz
//[YUYV_1280x720_6.66_30.03_Fps]
0x32,0xBF, 0x60, 
0x32,0xC0, 0x7e, 
0x32,0xC1, 0x7e, 
0x32,0xC2, 0x7e, 
0x32,0xC3, 0x00, 
0x32,0xC4, 0x20, 
//0x32,0xC4, 0x34, 	//2014-01-20
//0x32,0xC4, 0x2F, 	//2014-01-20
0x32,0xC5, 0x20, 
0x32,0xC6, 0x20, 
0x32,0xC7, 0x00, 
0x32,0xC8, 0xDE, 
0x32,0xC9, 0x7e, 
0x32,0xCA, 0x9E, 
0x32,0xCB, 0x9E, 
0x32,0xCC, 0x9E, 
0x32,0xCD, 0x9E, 
0x32,0xDB, 0x7B, 
0x32,0x00, 0x3E, 
0x32,0x01, 0x0F, 
0x30,0x28, 0x24, 
0x30,0x29, 0x20, 
0x30,0x2A, 0x04, 

#if nt99141_00
0x30, 0x22, 0x24,   //正180
#else
0x30, 0x22, 0x27,  //反  180
#endif

0x30,0x23, 0x24, 
0x30,0x02, 0x00, 
0x30,0x03, 0x04, 
0x30,0x04, 0x00, 
0x30,0x05, 0x04, 
0x30,0x06, 0x05, 
0x30,0x07, 0x03, 
0x30,0x08, 0x02, 
0x30,0x09, 0xD3, 
0x30,0x0A, 0x06, 
0x30,0x0B, 0x83, 
0x30,0x0C, 0x02, 
0x30,0x0D, 0xE3, 
0x30,0x0E, 0x05, 
0x30,0x0F, 0x00, 
0x30,0x10, 0x02, 
0x30,0x11, 0xD0, 
0x32,0xB8, 0x3F, 
0x32,0xB9, 0x31, 
0x32,0xBB, 0x87, 
0x32,0xBC, 0x38, 
0x32,0xBD, 0x3C, 
0x32,0xBE, 0x34, 
0x32,0x01, 0x3F, 
0x30,0x21, 0x06, 
0x30,0x60, 0x01, 
/*
//[Anti-Flicker：50Hz]
0x32,0xBF, 0x60, 
0x32,0xC0, 0x7e, 
0x32,0xC1, 0x7e, 
0x32,0xC2, 0x7e, 
0x32,0xC3, 0x00, 
//0x32,0xC4, 0x20, 
0x32,0xC5, 0x20, 
0x32,0xC6, 0x20, 
0x32,0xC7, 0x00, 
0x32,0xC8, 0xDE, 
0x32,0xC9, 0x7e, 
0x32,0xCA, 0x9e, 
0x32,0xCB, 0x9e, 
0x32,0xCC, 0x9e, 
0x32,0xCD, 0x9e, 
0x32,0xDB, 0x7B, 

//[Anti-Flicker：60Hz]
0x32,0xBF, 0x60, 
0x32,0xC0, 0x82, 
0x32,0xC1, 0x82, 
0x32,0xC2, 0x82, 
0x32,0xC3, 0x00, 
//0x32,0xC4, 0x20, 
0x32,0xC5, 0x20, 
0x32,0xC6, 0x20, 
0x32,0xC7, 0x00, 
0x32,0xC8, 0xB9, 
0x32,0xC9, 0x82, 
0x32,0xCA, 0xa2, 
0x32,0xCB, 0xa2, 
0x32,0xCC, 0xa2, 
0x32,0xCD, 0xa2, 
0x32,0xDB, 0x77, 
*/
#ifdef NT99141_HD_30_FPS
//PCLK :  74MHz
//[YUYV_1280x720_30.00_30.03_Fps]
0x32,0xBF, 0x40, 
0x32,0xC0, 0x5A, 
0x32,0xC1, 0x5A, 
0x32,0xC2, 0x5A, 
0x32,0xC3, 0x00, 
//0x32,0xC4, 0x20, 
0x32,0xC4, 0x34, 	//2014-01-20
//0x32,0xC4, 0x2F, 	//2014-01-20
0x32,0xC5, 0x20, 
0x32,0xC6, 0x20, 
0x32,0xC7, 0x00, 
0x32,0xC8, 0xDE, 
0x32,0xC9, 0x5A, 
0x32,0xCA, 0x7A, 
0x32,0xCB, 0x7A, 
0x32,0xCC, 0x7A, 
0x32,0xCD, 0x7A, 
0x32,0xDB, 0x7B, 
0x32,0x00, 0x3E, 
0x32,0x01, 0x0F, 
0x30,0x28, 0x24, 
0x30,0x29, 0x20, 
0x30,0x2A, 0x04, 
#if nt99141_00
0x30, 0x22, 0x24,   //正180
#else
0x30, 0x22, 0x27,  //反  180
#endif
0x30,0x23, 0x24, 
0x30,0x02, 0x00, 
0x30,0x03, 0x04, 
0x30,0x04, 0x00, 
0x30,0x05, 0x04, 
0x30,0x06, 0x05, 
0x30,0x07, 0x03, 
0x30,0x08, 0x02, 
0x30,0x09, 0xD3, 
0x30,0x0A, 0x06, 
0x30,0x0B, 0x83, 
0x30,0x0C, 0x02, 
0x30,0x0D, 0xE3, 
0x30,0x0E, 0x05, 
0x30,0x0F, 0x00, 
0x30,0x10, 0x02, 
0x30,0x11, 0xD0, 
0x32,0xB8, 0x3F, 
0x32,0xB9, 0x31, 
0x32,0xBB, 0x87, 
0x32,0xBC, 0x38, 
0x32,0xBD, 0x3C, 
0x32,0xBE, 0x34, 
0x32,0x01, 0x3F, 
0x30,0x21, 0x06, 
0x30,0x60, 0x01, 
#endif  //cut for hd 30fps 
#else
//PCLK    :  48MHz
//[YUYV_1280x720_12.50_20.00_Fps]
0x32, 0xBF, 0x60, 
0x32, 0xC0, 0x70, 
0x32, 0xC1, 0x70, 
0x32, 0xC2, 0x70, 
0x32, 0xC3, 0x00, 
0x32, 0xC4, 0x27, 
0x32, 0xC5, 0x20, 
0x32, 0xC6, 0x20, 
0x32, 0xC7, 0x00, 
0x32, 0xC8, 0x93, 
0x32, 0xC9, 0x70, 
0x32, 0xCA, 0x90, 
0x32, 0xCB, 0x90, 
0x32, 0xCC, 0x90, 
0x32, 0xCD, 0x90, 
0x32, 0xDB, 0x72, 
0x32, 0x00, 0x3E, 
0x32, 0x01, 0x0F, 
0x30, 0x28, 0x07, 
0x30, 0x29, 0x00, 
0x30, 0x2A, 0x04, 

#if nt99141_00
0x30, 0x22, 0x24,   //正180
#else
0x30, 0x22, 0x27,  //反  180
#endif
0x30, 0x23, 0x24, 
0x30, 0x02, 0x00, 
0x30, 0x03, 0x04, 
0x30, 0x04, 0x00, 
0x30, 0x05, 0x04, 
0x30, 0x06, 0x05, 
0x30, 0x07, 0x03, 
0x30, 0x08, 0x02, 
0x30, 0x09, 0xD3, 
0x30, 0x0A, 0x06, 
0x30, 0x0B, 0x5e, 
0x30, 0x0C, 0x02, 
0x30, 0x0D, 0xe0, 
0x30, 0x0E, 0x05, 
0x30, 0x0F, 0x00, 
0x30, 0x10, 0x02, 
0x30, 0x11, 0xD0, 
0x32, 0xB8, 0x3F, 
0x32, 0xB9, 0x31, 
0x32, 0xBB, 0x87, 
0x32, 0xBC, 0x38, 
0x32, 0xBD, 0x3C, 
0x32, 0xBE, 0x34, 
0x32, 0x01, 0x3F, 
0x30, 0x21, 0x06, 
0x30, 0x60, 0x01, 

/*
//[50Hz]
0x32, 0xBF, 0x60, 
0x32, 0xC0, 0x70, 
0x32, 0xC1, 0x70, 
0x32, 0xC2, 0x70, 
0x32, 0xC3, 0x00, 
0x32, 0xC4, 0x27, 
0x32, 0xC5, 0x28, 
0x32, 0xC6, 0x28, 
0x32, 0xC7, 0x00, 
0x32, 0xC8, 0xA0, 
0x32, 0xC9, 0x70, 
0x32, 0xCA, 0x98, 
0x32, 0xCB, 0x98, 
0x32, 0xCC, 0x98, 
0x32, 0xCD, 0x98, 
0x32, 0xDB, 0x74, 

//[60Hz]
0x32, 0xBF, 0x60, 
0x32, 0xC0, 0x73, 
0x32, 0xC1, 0x73, 
0x32, 0xC2, 0x73, 
0x32, 0xC3, 0x00, 
0x32, 0xC4, 0x27, 
0x32, 0xC5, 0x28, 
0x32, 0xC6, 0x28, 
0x32, 0xC7, 0x00, 
0x32, 0xC8, 0x85, 
0x32, 0xC9, 0x73, 
0x32, 0xCA, 0x9B, 
0x32, 0xCB, 0x9B, 
0x32, 0xCC, 0x9B, 
0x32, 0xCD, 0x9B, 
0x32, 0xDB, 0x70, 
*/
#endif
#endif
0x30,0x25,0x00,
0x33,0x31,0x04,
0x33,0x32,0xdc,
0x33,0x26,0x02,
0x31,0x08,0x05,
0x33,0x64,0x88,
0x33,0x65,0x84,
0x33,0x66,0x80,
0x33,0x67,0x7c,
0x33,0x68,0x20,
0x33,0x69,0x18,
0x33,0x6a,0x12,
0x33,0x6b,0x0a,
0x33,0x6c,0x00,
0x33,0x6d,0x1a,
0x33,0x6e,0x14,
0x33,0x6f,0x12,
0x33,0x70,0x0e,
0x33,0x71,0x20,
0x33,0x72,0x2c,
0x33,0x73,0x34,
0x33,0x74,0x3a,
0x33,0x75,0x08,
0x33,0x76,0x0a,
0x33,0x77,0x0c,
0x33,0x78,0x12,
0x30,0x2a,0x04,
0x32,0xc4,0x28,
0x32,0xf2,0x7c,
0x32,0xfc,0x00,
0x32,0xa9,0x04,
0x32,0xb8,0x3f,
0x32,0xb9,0x31,
0x32,0xbc,0x38,
0x32,0xbd,0x3c,
0x32,0xbe,0x34,
0x32,0x70,0x00,
0x32,0x71,0x11,
0x32,0x72,0x1e,
0x32,0x73,0x34,
0x32,0x74,0x4b,
0x32,0x75,0x60,
0x32,0x76,0x7b,
0x32,0x77,0x8e,
0x32,0x78,0xa0,
0x32,0x79,0xad,
0x32,0x7a,0xc3,
0x32,0x7b,0xd6,
0x32,0x7c,0xe6,
0x32,0x7d,0xf6,
0x32,0x7e,0xff,
0x30,0x60,0x01,

0x30,0x25,0x00,
0x30,0x53,0x50,
0x30,0x54,0x0c,
0x31,0x09,0x04,
0x32,0xbf,0x60,
0x32,0xc0,0x64,
0x32,0xc1,0x64,
0x32,0xc2,0x64,
0x32,0xc5,0x28,
0x32,0xc6,0x28,
0x32,0xc7,0x00,
0x32,0xc8,0x93,
0x32,0xc9,0x64,
0x32,0xca,0x84,
0x32,0xcb,0x84,
0x32,0xcc,0x84,
0x32,0xcd,0x84,
0x32,0xdb,0x72,
0x30,0x28,0x0a,
0x30,0x29,0x00,
0x30,0x2a,0x04,
0x30,0x0a,0x08,
0x30,0x0b,0xc1,
0x30,0x0c,0x02,
0x30,0x0d,0xe0,
0x30,0x21,0x06,
0x30,0x60,0x01,
	



END_FLAG, END_FLAG, END_FLAG
};
/****************   Camera Exposure Table   ****************/
static const T_U8 EXPOSURE_WHOLE_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 EXPOSURE_CENTER_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 EXPOSURE_MIDDLE_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};

/****************   Camera Brightness Table   ****************/
static const T_U8 BRIGHTNESS_0_TAB[] = 
{
    0x32, 0xfc,0xA0,//  -96 
    0x30, 0x60,0x01,
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 BRIGHTNESS_1_TAB[] = 
{
    0x32, 0xfc,0xC0,//  -64 
    0x30, 0x60,0x01,
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 BRIGHTNESS_2_TAB[] = 
{
    0x32, 0xfc,0xE0,//  -32 
    0x30, 0x60,0x01,
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 BRIGHTNESS_3_TAB[] = 
{
    0x32, 0xfc,0x00,//  00 
    0x30, 0x60,0x01, 
	END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 BRIGHTNESS_4_TAB[] = 
{
    0x32, 0xfc,0x20,//  32 
    0x30, 0x60,0x01,
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 BRIGHTNESS_5_TAB[] = 
{
    0x32, 0xfc,0x40,//  64 
    0x30, 0x60,0x01,
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 BRIGHTNESS_6_TAB[] = 
{
    0x32, 0xfc,0x60,//  96 
    0x30, 0x60,0x01,
    END_FLAG, END_FLAG, END_FLAG
};

/****************   Camera Contrast Table   ****************/
static const T_U8 CONTRAST_1_TAB[] = 
{
	0x32, 0xf2,0x50,
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 CONTRAST_2_TAB[] = 
{
	0x32, 0xf2,0x60,
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 CONTRAST_3_TAB[] = 
{
	0x32, 0xf2,0x70,
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 CONTRAST_4_TAB[] = 
{
	0x32, 0xf2,0x80,
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 CONTRAST_5_TAB[] = 
{
	0x32, 0xf2,0x90,
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 CONTRAST_6_TAB[] = 
{
	0x32, 0xf2,0xA0,
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 CONTRAST_7_TAB[] = 
{
	0x32, 0xf2,0xB0,
    END_FLAG, END_FLAG, END_FLAG
};

/****************   Camera Saturation Table   ****************/
static const T_U8 SATURATION_1_TAB[] = 
{
    //0x32, 0xf1,0x05,
	0x32, 0xf3,0x60,
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 SATURATION_2_TAB[] = 
{
    //0x32, 0xf1,0x05,
	0x32, 0xf3,0x70,
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 SATURATION_3_TAB[] = 
{
    //0x32, 0xf1,0x05,
	0x32, 0xf3,0x80,
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 SATURATION_4_TAB[] = 
{
    //0x32, 0xf1,0x05,
	0x32, 0xf3,0x90,
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 SATURATION_5_TAB[] = 
{
   // 0x32, 0xf1,0x05,
	0x32, 0xf3,0xA0,
    END_FLAG, END_FLAG, END_FLAG
};

/****************   Camera Sharpness Table   ****************/
static const T_U8 SHARPNESS_0_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 SHARPNESS_1_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 SHARPNESS_2_TAB[] = 
{   
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 SHARPNESS_3_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 SHARPNESS_4_TAB[] = 
{   
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 SHARPNESS_5_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 SHARPNESS_6_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};

/****************   Camera AWB Table   ****************/
static const T_U8 AWB_AUTO_TAB[] = 
{
    0x32, 0x01, 0x7F,
	0x30,0x25,0x00,
0x30,0x53,0x50,
0x30,0x54,0x0c,
0x31,0x09,0x04,
0x32,0xbf,0x60,
0x32,0xc0,0x64,
0x32,0xc1,0x64,
0x32,0xc2,0x64,
0x32,0xc5,0x28,
0x32,0xc6,0x28,
0x32,0xc7,0x00,
0x32,0xc8,0x93,
0x32,0xc9,0x64,
0x32,0xca,0x84,
0x32,0xcb,0x84,
0x32,0xcc,0x84,
0x32,0xcd,0x84,
0x32,0xdb,0x72,
0x30,0x28,0x0a,
0x30,0x29,0x00,
0x30,0x2a,0x04,
0x30,0x0a,0x08,
0x30,0x0b,0xc1,
0x30,0x0c,0x02,
0x30,0x0d,0xe0,
0x30,0x21,0x06,
0x30,0x60,0x01,
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 AWB_SUNNY_TAB[] = 
{
    0x32, 0x01, 0x6F,                    
    0x32, 0x90, 0x01,	// 312 / 256 = 1.218 
    0x32, 0x91, 0x38,                     
    0x32, 0x96, 0x01,	// 360 / 256 = 1.406 
    0x32, 0x97, 0x68,                     
    0x30, 0x60, 0x01,                     

    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 AWB_CLOUDY_TAB[] = 
{
		0x32, 0x01, 0x6F,
		0x32, 0x90, 0x01,	
		0x32, 0x91, 0x51, 
		0x32, 0x96, 0x01,	
		0x32, 0x97, 0x00, 
		0x30, 0x60, 0x01, 

    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 AWB_OFFICE_TAB[] = 
{
	0x32, 0x01, 0x6F,
  0x32, 0x90, 0x01,	// 368 / 256 = 1.437
  0x32, 0x91, 0x70,
  0x32, 0x96, 0x01,	// 511 / 256 = 1.996
  0x32, 0x97, 0xFF,
  0x30, 0x60, 0x01,
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 AWB_HOME_TAB[] = 
{
    0x32, 0x01, 0x6F,
	  0x32, 0x90, 0x01,	// 256 / 256 = 1.0
	  0x32, 0x91, 0x00,
	  0x32, 0x96, 0x02,	// 560 / 256 = 2.1875
	  0x32, 0x97, 0x30,
	  0x30, 0x60, 0x01,
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 AWB_NIGHT_TAB[] = 
{
    0x32, 0x01, 0x6F,
    0x32, 0x90, 0x01,	// 304 / 256 = 1.187
    0x32, 0x91, 0x30,
    0x32, 0x96, 0x01,	// 459 / 256 = 1.793
    0x32, 0x97, 0xCB,
    0x30, 0x60, 0x01,
    END_FLAG, END_FLAG, END_FLAG
};

/****************   Camera Effect Table   ****************/
static const T_U8 EFFECT_NORMAL_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 EFFECT_SEPIA_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 EFFECT_ANTIQUE_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 EFFECT_BLUISH_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 EFFECT_GREENISH_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};
static const T_U8 EFFECT_REDDISH_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 EFFECT_NEGATIVE_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 EFFECT_BW_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 EFFECT_BWN_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};

/****************   Camera night/day mode   ****************/
static const T_U8 DAY_MODE_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 NIGHT_MODE_TAB[] = 
{
    END_FLAG, END_FLAG, END_FLAG
};

/****************   Camera Mirror Table   ****************/
static const T_U8 MIRROR_V_TAB[] = 
{ 
    //flip
    0x30, 0x22, 0x25,
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 MIRROR_H_TAB[] = 
{
    //mirror
    0x30, 0x22, 0x26,
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 MIRROR_NORMAL_TAB[] = 
{
    //no mirror/flip
    0x30, 0x22, 0x24, 
    END_FLAG, END_FLAG, END_FLAG
};

static const T_U8 MIRROR_FLIP_TAB[] = 
{
    //mirror/flip
    0x30, 0x22, 0x27,
    END_FLAG, END_FLAG, END_FLAG
};
#endif
#endif



